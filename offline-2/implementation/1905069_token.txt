<INT, int>
<ID, main>
<LPAREN, (>
<RPAREN, )>
<LCURL, {>
<INT, int>
<ID, c>
<COMMA, ,>
<ID, i>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<INT, int>
<ID, n>
<LSQUARE, [>
<ID, c>
<RSQUARE, ]>
<COMMA, ,>
<ID, x>
<LSQUARE, [>
<ID, c>
<RSQUARE, ]>
<COMMA, ,>
<ID, y>
<LSQUARE, [>
<ID, c>
<RSQUARE, ]>
<SEMICOLON, ;>
<ID, cin>
<BITOP, >>>
<ID, c>
<SEMICOLON, ;>
<IF, if>
<LPAREN, (>
<ID, c>
<RELOP, ==>
<CONST_INT, 0>
<RPAREN, )>
<LCURL, {>
<ID, cout>
<BITOP, <<>
<SINGLE LINE STRING, OOPS!>
<SEMICOLON, ;>
<RCURL, }>
<ELSE, else>
<LCURL, {>
<WHILE, while>
<LPAREN, (>
<ID, i>
<RELOP, <>
<ID, c>
<RPAREN, )>
<LCURL, {>
<ID, cin>
<BITOP, >>>
<ID, n>
<LSQUARE, [>
<ID, i>
<RSQUARE, ]>
<BITOP, >>>
<ID, x>
<LSQUARE, [>
<ID, i>
<RSQUARE, ]>
<BITOP, >>>
<ID, y>
<LSQUARE, [>
<ID, i>
<RSQUARE, ]>
<SEMICOLON, ;>
<ID, n>
<LSQUARE, [>
<ID, i>
<RSQUARE, ]>
<INCOP, -->
<SEMICOLON, ;>
<ID, x>
<LSQUARE, [>
<ID, i>
<RSQUARE, ]>
<INCOP, -->
<SEMICOLON, ;>
<ID, i>
<INCOP, ++>
<SEMICOLON, ;>
<RCURL, }>
<ID, i>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<WHILE, while>
<LPAREN, (>
<ID, i>
<RELOP, <>
<ID, c>
<RPAREN, )>
<LCURL, {>
<IF, if>
<LPAREN, (>
<ID, n>
<LSQUARE, [>
<ID, i>
<RSQUARE, ]>
<MULOP, %>
<CONST_INT, 2>
<RELOP, ==>
<CONST_INT, 0>
<RPAREN, )>
<LCURL, {>
<ID, n>
<LSQUARE, [>
<ID, i>
<RSQUARE, ]>
<ASSIGNOP, =>
<ID, n>
<LSQUARE, [>
<ID, i>
<RSQUARE, ]>
<MULOP, />
<CONST_INT, 2>
<SEMICOLON, ;>
<IF, if>
<LPAREN, (>
<ID, x>
<LSQUARE, [>
<ID, i>
<RSQUARE, ]>
<RELOP, >=>
<ID, n>
<LSQUARE, [>
<ID, i>
<RSQUARE, ]>
<LOGICOP, &&>
<ID, y>
<LSQUARE, [>
<ID, i>
<RSQUARE, ]>
<RELOP, >=>
<ID, n>
<LSQUARE, [>
<ID, i>
<RSQUARE, ]>
<RPAREN, )>
<LCURL, {>
<ID, cout>
<BITOP, <<>
<SINGLE LINE STRING, YES
>
<SEMICOLON, ;>
<RCURL, }>
<ELSE, else>
<LCURL, {>
<ID, cout>
<BITOP, <<>
<SINGLE LINE STRING, NO
>
<SEMICOLON, ;>
<RCURL, }>
<RCURL, }>
<ELSE, else>
<LCURL, {>
<ID, cout>
<BITOP, <<>
<SINGLE LINE STRING, OOPS!
>
<SEMICOLON, ;>
<RCURL, }>
<ID, i>
<INCOP, ++>
<SEMICOLON, ;>
<RCURL, }>
<RCURL, }>
<RCURL, }>
